{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "hw2",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jqVqT_Cxh4Ho"
      },
      "source": [
        "# HW2\n",
        "就用我們課堂上提供的資料，試跑神經網絡\n",
        "\n",
        "你可以改變自變數、依變數\n",
        "\n",
        "加減網絡的層數\n",
        "\n",
        "加減每層的神經元數\n",
        "\n",
        "改變 activation function\n",
        "\n",
        "比較其效能\n",
        "\n",
        "是否有些有趣的發現\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BqHKuVdLdy2r"
      },
      "source": [
        "# 建置自己的類神經網絡\n",
        "現在我們要建一個神經網絡了。\n",
        "要注意以下幾個概念：\n",
        "* input 層\n",
        "* hidden layer 層數，型態\n",
        "* 神經元(neura) 個數\n",
        "* activation function \n",
        "* output 層"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y8t_EdO8jEHz"
      },
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cmpbx0VbU4pn"
      },
      "source": [
        "### 讀取網頁資料"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2bZ1KSlovsmi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        },
        "outputId": "3ff50597-f117-46bc-86f2-fe93fe9fdc15"
      },
      "source": [
        "#因為不知道要用甚麼資料所以用老師的\n",
        "import pandas as pd\n",
        "url2=\"https://ceiba.ntu.edu.tw/course/cd0f9d/house_price2.csv\"\n",
        "df = pd.read_csv(url2)\n",
        "df.head(5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>2ndFlrSF</th>\n",
              "      <th>GrLivArea</th>\n",
              "      <th>FullBath</th>\n",
              "      <th>HalfBath</th>\n",
              "      <th>BedroomAbvGr</th>\n",
              "      <th>TotRmsAbvGrd</th>\n",
              "      <th>YrSold</th>\n",
              "      <th>SalePrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2003</td>\n",
              "      <td>854</td>\n",
              "      <td>1710</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>2008</td>\n",
              "      <td>208500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1976</td>\n",
              "      <td>0</td>\n",
              "      <td>1262</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>2007</td>\n",
              "      <td>181500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2001</td>\n",
              "      <td>866</td>\n",
              "      <td>1786</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>2008</td>\n",
              "      <td>223500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1915</td>\n",
              "      <td>756</td>\n",
              "      <td>1717</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>2006</td>\n",
              "      <td>140000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2000</td>\n",
              "      <td>1053</td>\n",
              "      <td>2198</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>2008</td>\n",
              "      <td>250000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   YearBuilt  2ndFlrSF  GrLivArea  ...  TotRmsAbvGrd  YrSold  SalePrice\n",
              "0       2003       854       1710  ...             8    2008     208500\n",
              "1       1976         0       1262  ...             6    2007     181500\n",
              "2       2001       866       1786  ...             6    2008     223500\n",
              "3       1915       756       1717  ...             7    2006     140000\n",
              "4       2000      1053       2198  ...             9    2008     250000\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 349
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "7e_RmGNzzlWH",
        "outputId": "eecb917c-3472-4570-82a0-ba402ed5dffe"
      },
      "source": [
        "# 單位改為萬\n",
        "df['SalePrice']=df['SalePrice']/10000\n",
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>2ndFlrSF</th>\n",
              "      <th>GrLivArea</th>\n",
              "      <th>FullBath</th>\n",
              "      <th>HalfBath</th>\n",
              "      <th>BedroomAbvGr</th>\n",
              "      <th>TotRmsAbvGrd</th>\n",
              "      <th>YrSold</th>\n",
              "      <th>SalePrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2003</td>\n",
              "      <td>854</td>\n",
              "      <td>1710</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>2008</td>\n",
              "      <td>20.8500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1976</td>\n",
              "      <td>0</td>\n",
              "      <td>1262</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>2007</td>\n",
              "      <td>18.1500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2001</td>\n",
              "      <td>866</td>\n",
              "      <td>1786</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>2008</td>\n",
              "      <td>22.3500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1915</td>\n",
              "      <td>756</td>\n",
              "      <td>1717</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>2006</td>\n",
              "      <td>14.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2000</td>\n",
              "      <td>1053</td>\n",
              "      <td>2198</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>2008</td>\n",
              "      <td>25.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1455</th>\n",
              "      <td>1999</td>\n",
              "      <td>694</td>\n",
              "      <td>1647</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>2007</td>\n",
              "      <td>17.5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1456</th>\n",
              "      <td>1978</td>\n",
              "      <td>0</td>\n",
              "      <td>2073</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>2010</td>\n",
              "      <td>21.0000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1457</th>\n",
              "      <td>1941</td>\n",
              "      <td>1152</td>\n",
              "      <td>2340</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>2010</td>\n",
              "      <td>26.6500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1458</th>\n",
              "      <td>1950</td>\n",
              "      <td>0</td>\n",
              "      <td>1078</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2010</td>\n",
              "      <td>14.2125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1459</th>\n",
              "      <td>1965</td>\n",
              "      <td>0</td>\n",
              "      <td>1256</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>2008</td>\n",
              "      <td>14.7500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1460 rows × 9 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      YearBuilt  2ndFlrSF  GrLivArea  ...  TotRmsAbvGrd  YrSold  SalePrice\n",
              "0          2003       854       1710  ...             8    2008    20.8500\n",
              "1          1976         0       1262  ...             6    2007    18.1500\n",
              "2          2001       866       1786  ...             6    2008    22.3500\n",
              "3          1915       756       1717  ...             7    2006    14.0000\n",
              "4          2000      1053       2198  ...             9    2008    25.0000\n",
              "...         ...       ...        ...  ...           ...     ...        ...\n",
              "1455       1999       694       1647  ...             7    2007    17.5000\n",
              "1456       1978         0       2073  ...             7    2010    21.0000\n",
              "1457       1941      1152       2340  ...             9    2010    26.6500\n",
              "1458       1950         0       1078  ...             5    2010    14.2125\n",
              "1459       1965         0       1256  ...             6    2008    14.7500\n",
              "\n",
              "[1460 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 350
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VOPJdByEvspU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "101fb0fa-add1-40d2-a178-8bed2f9b112f"
      },
      "source": [
        "# 依變數與自變數\n",
        "X = df.drop(columns=['SalePrice'])\n",
        "#x=除了saleprice以外所有變數\n",
        "\n",
        "#X = df[['GrLivArea']]\n",
        "#x=GrLivArea，試做後發現效果不如原本好\n",
        "\n",
        "Y = df[['SalePrice']]\n",
        "#印出來看看\n",
        "print(X)\n",
        "print(\"==================================\")\n",
        "print(Y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      YearBuilt  2ndFlrSF  GrLivArea  ...  BedroomAbvGr  TotRmsAbvGrd  YrSold\n",
            "0          2003       854       1710  ...             3             8    2008\n",
            "1          1976         0       1262  ...             3             6    2007\n",
            "2          2001       866       1786  ...             3             6    2008\n",
            "3          1915       756       1717  ...             3             7    2006\n",
            "4          2000      1053       2198  ...             4             9    2008\n",
            "...         ...       ...        ...  ...           ...           ...     ...\n",
            "1455       1999       694       1647  ...             3             7    2007\n",
            "1456       1978         0       2073  ...             3             7    2010\n",
            "1457       1941      1152       2340  ...             4             9    2010\n",
            "1458       1950         0       1078  ...             2             5    2010\n",
            "1459       1965         0       1256  ...             3             6    2008\n",
            "\n",
            "[1460 rows x 8 columns]\n",
            "==================================\n",
            "      SalePrice\n",
            "0       20.8500\n",
            "1       18.1500\n",
            "2       22.3500\n",
            "3       14.0000\n",
            "4       25.0000\n",
            "...         ...\n",
            "1455    17.5000\n",
            "1456    21.0000\n",
            "1457    26.6500\n",
            "1458    14.2125\n",
            "1459    14.7500\n",
            "\n",
            "[1460 rows x 1 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MRHJ4CA-Kwfo"
      },
      "source": [
        "import pandas as pd\n",
        "from scipy.stats import zscore\n",
        "from sklearn.model_selection import train_test_split\n",
        "import matplotlib.pyplot as plt\n",
        "# 拆成訓練組與測試組\n",
        "x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.25, random_state=42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K4UC6gLXhZ7k"
      },
      "source": [
        "## 建置神經網絡\n",
        "* 請注意建神經層的方式\n",
        "* 先宣告 sequential() 取名本例為 model\n",
        "* 接著一層層加進去 add()\n",
        "* 要有 activation function\n",
        "* 最後要 compile, 指定 loss function\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DzHpzDcGOIDt",
        "outputId": "f14a246d-b65e-4b60-a877-5c184a60e0e0"
      },
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Activation\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "# Build the neural network\n",
        "model = Sequential()\n",
        "# 只有一層 output layer 沒有加 activation function\n",
        "model.add(Dense(1, input_shape=(8,)))\n",
        "model.compile(loss='mean_squared_error', optimizer='adam')\n",
        "#model.compile(loss='mean_absolute_error', optimizer='adam')#若使用此loss function則添加隱藏層前的rmse僅4.91，效果不錯，但添加隱藏層後的rmse不佳\n",
        "#squared_hinge,mean_squared_logarithmic_error 在添加隱藏層前相當不准\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_48\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_119 (Dense)            (None, 1)                 9         \n",
            "=================================================================\n",
            "Total params: 9\n",
            "Trainable params: 9\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "7V6oA0xjPqse",
        "outputId": "53af1632-fe7e-4de3-f3f4-c23330b6174c"
      },
      "source": [
        "tf.keras.utils.plot_model(model,show_shapes=True,dpi=100)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 354
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-frDs3GZPzuV"
      },
      "source": [
        "## 開始訓練\n",
        "這個模型如同迴歸分析，沒有隱藏層，預測值等於自變數乘以係數。"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u9o1FgiYPoe5",
        "outputId": "2a4af92c-63c8-42c4-dc27-d9817050d1fc"
      },
      "source": [
        "# 如果改進效果不大，提早結束\n",
        "monitor = EarlyStopping(monitor='val_loss', min_delta=1e-3,\n",
        "                        patience=5, verbose=1, mode='auto', \n",
        "                        restore_best_weights=True)\n",
        "# 分成訓練組與測試組訓練，verbose=2 為報表顯示型式\n",
        "model.fit(x_train,y_train,validation_data=(x_test,y_test),\n",
        "          callbacks=[monitor],verbose=2,epochs=1000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/1000\n",
            "35/35 - 0s - loss: 584566.5625 - val_loss: 426009.7812\n",
            "Epoch 2/1000\n",
            "35/35 - 0s - loss: 331815.7812 - val_loss: 232124.5625\n",
            "Epoch 3/1000\n",
            "35/35 - 0s - loss: 175245.4219 - val_loss: 118860.4922\n",
            "Epoch 4/1000\n",
            "35/35 - 0s - loss: 88493.2734 - val_loss: 59476.3438\n",
            "Epoch 5/1000\n",
            "35/35 - 0s - loss: 45047.6953 - val_loss: 31659.1270\n",
            "Epoch 6/1000\n",
            "35/35 - 0s - loss: 25329.9258 - val_loss: 19303.2500\n",
            "Epoch 7/1000\n",
            "35/35 - 0s - loss: 16902.8477 - val_loss: 13981.7822\n",
            "Epoch 8/1000\n",
            "35/35 - 0s - loss: 13414.7402 - val_loss: 11777.2002\n",
            "Epoch 9/1000\n",
            "35/35 - 0s - loss: 11707.2383 - val_loss: 10394.5264\n",
            "Epoch 10/1000\n",
            "35/35 - 0s - loss: 10510.6221 - val_loss: 9372.3945\n",
            "Epoch 11/1000\n",
            "35/35 - 0s - loss: 9510.0039 - val_loss: 8461.2607\n",
            "Epoch 12/1000\n",
            "35/35 - 0s - loss: 8610.1211 - val_loss: 7647.1909\n",
            "Epoch 13/1000\n",
            "35/35 - 0s - loss: 7778.3779 - val_loss: 6899.2886\n",
            "Epoch 14/1000\n",
            "35/35 - 0s - loss: 7017.9214 - val_loss: 6224.0049\n",
            "Epoch 15/1000\n",
            "35/35 - 0s - loss: 6319.5220 - val_loss: 5594.0156\n",
            "Epoch 16/1000\n",
            "35/35 - 0s - loss: 5691.7876 - val_loss: 5033.9141\n",
            "Epoch 17/1000\n",
            "35/35 - 0s - loss: 5128.4009 - val_loss: 4533.7031\n",
            "Epoch 18/1000\n",
            "35/35 - 0s - loss: 4624.0889 - val_loss: 4096.9951\n",
            "Epoch 19/1000\n",
            "35/35 - 0s - loss: 4173.9214 - val_loss: 3696.4124\n",
            "Epoch 20/1000\n",
            "35/35 - 0s - loss: 3776.5171 - val_loss: 3346.9438\n",
            "Epoch 21/1000\n",
            "35/35 - 0s - loss: 3431.4744 - val_loss: 3050.8630\n",
            "Epoch 22/1000\n",
            "35/35 - 0s - loss: 3127.8330 - val_loss: 2784.3535\n",
            "Epoch 23/1000\n",
            "35/35 - 0s - loss: 2859.3467 - val_loss: 2554.6912\n",
            "Epoch 24/1000\n",
            "35/35 - 0s - loss: 2627.7100 - val_loss: 2349.6426\n",
            "Epoch 25/1000\n",
            "35/35 - 0s - loss: 2427.5107 - val_loss: 2177.1677\n",
            "Epoch 26/1000\n",
            "35/35 - 0s - loss: 2251.9675 - val_loss: 2026.6599\n",
            "Epoch 27/1000\n",
            "35/35 - 0s - loss: 2102.0391 - val_loss: 1887.5383\n",
            "Epoch 28/1000\n",
            "35/35 - 0s - loss: 1964.1173 - val_loss: 1778.0990\n",
            "Epoch 29/1000\n",
            "35/35 - 0s - loss: 1848.4800 - val_loss: 1670.3588\n",
            "Epoch 30/1000\n",
            "35/35 - 0s - loss: 1746.0253 - val_loss: 1581.6654\n",
            "Epoch 31/1000\n",
            "35/35 - 0s - loss: 1654.7325 - val_loss: 1507.8015\n",
            "Epoch 32/1000\n",
            "35/35 - 0s - loss: 1573.9540 - val_loss: 1430.6633\n",
            "Epoch 33/1000\n",
            "35/35 - 0s - loss: 1501.7852 - val_loss: 1362.0925\n",
            "Epoch 34/1000\n",
            "35/35 - 0s - loss: 1433.9196 - val_loss: 1304.9027\n",
            "Epoch 35/1000\n",
            "35/35 - 0s - loss: 1373.8801 - val_loss: 1248.0992\n",
            "Epoch 36/1000\n",
            "35/35 - 0s - loss: 1318.4777 - val_loss: 1196.7510\n",
            "Epoch 37/1000\n",
            "35/35 - 0s - loss: 1265.6550 - val_loss: 1152.4852\n",
            "Epoch 38/1000\n",
            "35/35 - 0s - loss: 1216.4388 - val_loss: 1106.0896\n",
            "Epoch 39/1000\n",
            "35/35 - 0s - loss: 1172.3547 - val_loss: 1059.2876\n",
            "Epoch 40/1000\n",
            "35/35 - 0s - loss: 1129.0890 - val_loss: 1018.6215\n",
            "Epoch 41/1000\n",
            "35/35 - 0s - loss: 1086.4460 - val_loss: 984.1274\n",
            "Epoch 42/1000\n",
            "35/35 - 0s - loss: 1045.9832 - val_loss: 946.0597\n",
            "Epoch 43/1000\n",
            "35/35 - 0s - loss: 1007.5897 - val_loss: 908.8465\n",
            "Epoch 44/1000\n",
            "35/35 - 0s - loss: 966.8680 - val_loss: 872.7147\n",
            "Epoch 45/1000\n",
            "35/35 - 0s - loss: 929.2479 - val_loss: 834.6410\n",
            "Epoch 46/1000\n",
            "35/35 - 0s - loss: 893.3486 - val_loss: 801.9923\n",
            "Epoch 47/1000\n",
            "35/35 - 0s - loss: 858.1708 - val_loss: 771.7505\n",
            "Epoch 48/1000\n",
            "35/35 - 0s - loss: 823.6213 - val_loss: 734.7215\n",
            "Epoch 49/1000\n",
            "35/35 - 0s - loss: 791.4772 - val_loss: 702.2692\n",
            "Epoch 50/1000\n",
            "35/35 - 0s - loss: 757.8168 - val_loss: 674.2964\n",
            "Epoch 51/1000\n",
            "35/35 - 0s - loss: 726.4124 - val_loss: 641.9737\n",
            "Epoch 52/1000\n",
            "35/35 - 0s - loss: 695.5320 - val_loss: 614.7296\n",
            "Epoch 53/1000\n",
            "35/35 - 0s - loss: 666.0956 - val_loss: 588.2905\n",
            "Epoch 54/1000\n",
            "35/35 - 0s - loss: 637.6143 - val_loss: 559.2530\n",
            "Epoch 55/1000\n",
            "35/35 - 0s - loss: 609.8041 - val_loss: 529.7189\n",
            "Epoch 56/1000\n",
            "35/35 - 0s - loss: 582.1087 - val_loss: 506.5115\n",
            "Epoch 57/1000\n",
            "35/35 - 0s - loss: 556.2685 - val_loss: 487.3092\n",
            "Epoch 58/1000\n",
            "35/35 - 0s - loss: 529.9478 - val_loss: 458.1380\n",
            "Epoch 59/1000\n",
            "35/35 - 0s - loss: 506.8403 - val_loss: 434.6252\n",
            "Epoch 60/1000\n",
            "35/35 - 0s - loss: 483.1954 - val_loss: 415.4355\n",
            "Epoch 61/1000\n",
            "35/35 - 0s - loss: 458.8275 - val_loss: 391.5125\n",
            "Epoch 62/1000\n",
            "35/35 - 0s - loss: 437.2848 - val_loss: 375.6058\n",
            "Epoch 63/1000\n",
            "35/35 - 0s - loss: 415.8820 - val_loss: 354.0498\n",
            "Epoch 64/1000\n",
            "35/35 - 0s - loss: 395.5368 - val_loss: 331.7599\n",
            "Epoch 65/1000\n",
            "35/35 - 0s - loss: 376.1319 - val_loss: 316.8330\n",
            "Epoch 66/1000\n",
            "35/35 - 0s - loss: 356.8812 - val_loss: 299.5627\n",
            "Epoch 67/1000\n",
            "35/35 - 0s - loss: 339.1807 - val_loss: 283.6008\n",
            "Epoch 68/1000\n",
            "35/35 - 0s - loss: 321.5633 - val_loss: 268.8621\n",
            "Epoch 69/1000\n",
            "35/35 - 0s - loss: 305.9353 - val_loss: 251.3955\n",
            "Epoch 70/1000\n",
            "35/35 - 0s - loss: 292.2943 - val_loss: 241.0177\n",
            "Epoch 71/1000\n",
            "35/35 - 0s - loss: 275.9890 - val_loss: 224.9769\n",
            "Epoch 72/1000\n",
            "35/35 - 0s - loss: 261.4845 - val_loss: 213.3499\n",
            "Epoch 73/1000\n",
            "35/35 - 0s - loss: 248.6874 - val_loss: 201.6891\n",
            "Epoch 74/1000\n",
            "35/35 - 0s - loss: 236.9891 - val_loss: 190.1617\n",
            "Epoch 75/1000\n",
            "35/35 - 0s - loss: 223.7659 - val_loss: 181.6932\n",
            "Epoch 76/1000\n",
            "35/35 - 0s - loss: 213.5249 - val_loss: 169.2068\n",
            "Epoch 77/1000\n",
            "35/35 - 0s - loss: 202.8819 - val_loss: 160.8620\n",
            "Epoch 78/1000\n",
            "35/35 - 0s - loss: 192.9711 - val_loss: 152.0214\n",
            "Epoch 79/1000\n",
            "35/35 - 0s - loss: 183.2640 - val_loss: 144.7522\n",
            "Epoch 80/1000\n",
            "35/35 - 0s - loss: 175.5184 - val_loss: 136.4695\n",
            "Epoch 81/1000\n",
            "35/35 - 0s - loss: 167.0803 - val_loss: 134.0173\n",
            "Epoch 82/1000\n",
            "35/35 - 0s - loss: 159.8468 - val_loss: 124.7402\n",
            "Epoch 83/1000\n",
            "35/35 - 0s - loss: 153.6138 - val_loss: 118.4346\n",
            "Epoch 84/1000\n",
            "35/35 - 0s - loss: 146.2168 - val_loss: 115.0179\n",
            "Epoch 85/1000\n",
            "35/35 - 0s - loss: 140.6203 - val_loss: 110.3749\n",
            "Epoch 86/1000\n",
            "35/35 - 0s - loss: 134.6627 - val_loss: 103.9663\n",
            "Epoch 87/1000\n",
            "35/35 - 0s - loss: 129.4110 - val_loss: 99.2466\n",
            "Epoch 88/1000\n",
            "35/35 - 0s - loss: 124.2678 - val_loss: 94.5638\n",
            "Epoch 89/1000\n",
            "35/35 - 0s - loss: 119.7107 - val_loss: 92.3735\n",
            "Epoch 90/1000\n",
            "35/35 - 0s - loss: 115.6251 - val_loss: 89.7512\n",
            "Epoch 91/1000\n",
            "35/35 - 0s - loss: 112.2948 - val_loss: 84.7567\n",
            "Epoch 92/1000\n",
            "35/35 - 0s - loss: 109.3989 - val_loss: 82.1656\n",
            "Epoch 93/1000\n",
            "35/35 - 0s - loss: 105.1010 - val_loss: 81.2465\n",
            "Epoch 94/1000\n",
            "35/35 - 0s - loss: 102.4153 - val_loss: 78.6069\n",
            "Epoch 95/1000\n",
            "35/35 - 0s - loss: 99.4837 - val_loss: 77.2296\n",
            "Epoch 96/1000\n",
            "35/35 - 0s - loss: 97.2764 - val_loss: 75.2635\n",
            "Epoch 97/1000\n",
            "35/35 - 0s - loss: 95.3489 - val_loss: 73.4953\n",
            "Epoch 98/1000\n",
            "35/35 - 0s - loss: 93.3560 - val_loss: 71.6085\n",
            "Epoch 99/1000\n",
            "35/35 - 0s - loss: 91.0090 - val_loss: 75.0019\n",
            "Epoch 100/1000\n",
            "35/35 - 0s - loss: 90.1977 - val_loss: 70.4985\n",
            "Epoch 101/1000\n",
            "35/35 - 0s - loss: 88.0174 - val_loss: 68.3139\n",
            "Epoch 102/1000\n",
            "35/35 - 0s - loss: 87.7533 - val_loss: 68.5266\n",
            "Epoch 103/1000\n",
            "35/35 - 0s - loss: 85.2440 - val_loss: 67.6612\n",
            "Epoch 104/1000\n",
            "35/35 - 0s - loss: 84.2696 - val_loss: 67.1590\n",
            "Epoch 105/1000\n",
            "35/35 - 0s - loss: 83.3924 - val_loss: 65.7937\n",
            "Epoch 106/1000\n",
            "35/35 - 0s - loss: 82.4064 - val_loss: 67.5666\n",
            "Epoch 107/1000\n",
            "35/35 - 0s - loss: 82.2958 - val_loss: 65.3779\n",
            "Epoch 108/1000\n",
            "35/35 - 0s - loss: 81.0541 - val_loss: 68.1662\n",
            "Epoch 109/1000\n",
            "35/35 - 0s - loss: 80.3244 - val_loss: 64.8037\n",
            "Epoch 110/1000\n",
            "35/35 - 0s - loss: 80.0985 - val_loss: 64.4671\n",
            "Epoch 111/1000\n",
            "35/35 - 0s - loss: 79.7655 - val_loss: 65.3454\n",
            "Epoch 112/1000\n",
            "35/35 - 0s - loss: 79.5606 - val_loss: 64.6737\n",
            "Epoch 113/1000\n",
            "35/35 - 0s - loss: 78.2668 - val_loss: 65.7953\n",
            "Epoch 114/1000\n",
            "35/35 - 0s - loss: 78.2966 - val_loss: 64.5615\n",
            "Epoch 115/1000\n",
            "35/35 - 0s - loss: 77.8342 - val_loss: 64.6960\n",
            "Restoring model weights from the end of the best epoch.\n",
            "Epoch 00115: early stopping\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7fb043482050>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 355
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jorHd5UIPC2O"
      },
      "source": [
        "## Measure RMSE error 誤差的均方差開根號\n",
        "衡量模型的有效性"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JZLe6a0XOotG",
        "outputId": "05aaf02f-a2e8-42a5-fd0f-ea95958a7de9"
      },
      "source": [
        "import numpy as np\n",
        "from sklearn import metrics\n",
        "# 預測值\n",
        "pred = model.predict(x_test)\n",
        "score = np.sqrt(metrics.mean_squared_error(pred,y_test))\n",
        "print(\"Final score (RMSE): {}\".format(score))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Final score (RMSE): 8.029140316560401\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WK7y1SrKQ6ss"
      },
      "source": [
        "## 增加隱藏層"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MdiqBF2SL8qG",
        "outputId": "16e365c5-514a-40e0-96da-61fa7afc8203"
      },
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Activation\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "\n",
        "# Build the neural network\n",
        "model = Sequential()\n",
        "# hidden layer 1 因為 8 個自變數(如果只用GrLivArea當x，就是1個自變數，要改成input_shape=(1,))\n",
        "model.add(Dense(25, input_shape=(8,), activation='relu'))\n",
        "# 新增一個hidden layer 2 使rmse從4.92下降到4.85\n",
        "model.add(Dense(25, input_shape=(8,), activation='relu'))\n",
        "\n",
        "# hidden layer 3 注意有 activation(將神經元數量往上加，改善效果並不明顯)\n",
        "model.add(Dense(10, activation='relu')) \n",
        "\n",
        "#(加入另一個relu反而使rmse增加，故不使用)\n",
        "#(加入sigmoid反而使rmse增加，故不使用)\n",
        "#(加入tanh反而使rmse增加，故不使用)\n",
        "\n",
        "# output layer \n",
        "model.add(Dense(1))\n",
        "# compile\n",
        "model.compile(loss='mean_squared_error', optimizer='adam')\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_49\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_120 (Dense)            (None, 25)                225       \n",
            "_________________________________________________________________\n",
            "dense_121 (Dense)            (None, 25)                650       \n",
            "_________________________________________________________________\n",
            "dense_122 (Dense)            (None, 10)                260       \n",
            "_________________________________________________________________\n",
            "dense_123 (Dense)            (None, 1)                 11        \n",
            "=================================================================\n",
            "Total params: 1,146\n",
            "Trainable params: 1,146\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 555
        },
        "id": "G9lNrZmNU2aL",
        "outputId": "a75fbeeb-2d9d-4432-a099-e862dd4fb2a5"
      },
      "source": [
        "tf.keras.utils.plot_model(model,show_shapes=True,dpi=100)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 358
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KAoTeqqyR0cW",
        "outputId": "eb78c55a-5eae-4ec1-80b2-67bcc21167e4"
      },
      "source": [
        "# fit\n",
        "monitor = EarlyStopping(monitor='val_loss', min_delta=1e-3,\n",
        "                        patience=5, verbose=1, mode='auto', \n",
        "                        restore_best_weights=True)\n",
        "model.fit(x_train,y_train,validation_data=(x_test,y_test),\n",
        "          callbacks=[monitor],verbose=2,epochs=1000)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/1000\n",
            "35/35 - 1s - loss: 285143.4375 - val_loss: 10360.2207\n",
            "Epoch 2/1000\n",
            "35/35 - 0s - loss: 2516.4761 - val_loss: 480.2188\n",
            "Epoch 3/1000\n",
            "35/35 - 0s - loss: 320.4718 - val_loss: 162.0999\n",
            "Epoch 4/1000\n",
            "35/35 - 0s - loss: 188.0109 - val_loss: 143.0036\n",
            "Epoch 5/1000\n",
            "35/35 - 0s - loss: 146.7242 - val_loss: 124.9951\n",
            "Epoch 6/1000\n",
            "35/35 - 0s - loss: 118.0587 - val_loss: 112.4133\n",
            "Epoch 7/1000\n",
            "35/35 - 0s - loss: 98.6236 - val_loss: 104.2386\n",
            "Epoch 8/1000\n",
            "35/35 - 0s - loss: 87.0384 - val_loss: 97.7825\n",
            "Epoch 9/1000\n",
            "35/35 - 0s - loss: 78.9579 - val_loss: 93.2686\n",
            "Epoch 10/1000\n",
            "35/35 - 0s - loss: 73.3516 - val_loss: 86.1839\n",
            "Epoch 11/1000\n",
            "35/35 - 0s - loss: 69.5893 - val_loss: 81.1918\n",
            "Epoch 12/1000\n",
            "35/35 - 0s - loss: 64.8498 - val_loss: 84.6536\n",
            "Epoch 13/1000\n",
            "35/35 - 0s - loss: 62.6072 - val_loss: 79.5643\n",
            "Epoch 14/1000\n",
            "35/35 - 0s - loss: 61.8184 - val_loss: 74.9361\n",
            "Epoch 15/1000\n",
            "35/35 - 0s - loss: 56.8378 - val_loss: 64.8384\n",
            "Epoch 16/1000\n",
            "35/35 - 0s - loss: 52.2405 - val_loss: 63.6910\n",
            "Epoch 17/1000\n",
            "35/35 - 0s - loss: 50.8006 - val_loss: 63.5664\n",
            "Epoch 18/1000\n",
            "35/35 - 0s - loss: 49.4180 - val_loss: 59.3772\n",
            "Epoch 19/1000\n",
            "35/35 - 0s - loss: 44.7136 - val_loss: 57.9938\n",
            "Epoch 20/1000\n",
            "35/35 - 0s - loss: 45.1272 - val_loss: 54.2747\n",
            "Epoch 21/1000\n",
            "35/35 - 0s - loss: 41.2737 - val_loss: 50.0325\n",
            "Epoch 22/1000\n",
            "35/35 - 0s - loss: 43.4712 - val_loss: 51.4757\n",
            "Epoch 23/1000\n",
            "35/35 - 0s - loss: 39.9644 - val_loss: 47.0637\n",
            "Epoch 24/1000\n",
            "35/35 - 0s - loss: 40.1687 - val_loss: 44.9200\n",
            "Epoch 25/1000\n",
            "35/35 - 0s - loss: 36.6133 - val_loss: 43.6487\n",
            "Epoch 26/1000\n",
            "35/35 - 0s - loss: 36.0343 - val_loss: 51.2314\n",
            "Epoch 27/1000\n",
            "35/35 - 0s - loss: 35.9832 - val_loss: 46.5301\n",
            "Epoch 28/1000\n",
            "35/35 - 0s - loss: 35.9026 - val_loss: 40.5350\n",
            "Epoch 29/1000\n",
            "35/35 - 0s - loss: 36.3264 - val_loss: 40.0840\n",
            "Epoch 30/1000\n",
            "35/35 - 0s - loss: 32.6631 - val_loss: 38.7108\n",
            "Epoch 31/1000\n",
            "35/35 - 0s - loss: 33.6428 - val_loss: 38.9742\n",
            "Epoch 32/1000\n",
            "35/35 - 0s - loss: 35.0051 - val_loss: 40.5588\n",
            "Epoch 33/1000\n",
            "35/35 - 0s - loss: 31.0144 - val_loss: 39.3604\n",
            "Epoch 34/1000\n",
            "35/35 - 0s - loss: 30.5837 - val_loss: 38.0804\n",
            "Epoch 35/1000\n",
            "35/35 - 0s - loss: 31.9379 - val_loss: 36.5750\n",
            "Epoch 36/1000\n",
            "35/35 - 0s - loss: 29.5328 - val_loss: 36.7109\n",
            "Epoch 37/1000\n",
            "35/35 - 0s - loss: 29.7395 - val_loss: 33.1949\n",
            "Epoch 38/1000\n",
            "35/35 - 0s - loss: 30.3794 - val_loss: 33.7889\n",
            "Epoch 39/1000\n",
            "35/35 - 0s - loss: 29.9261 - val_loss: 44.3325\n",
            "Epoch 40/1000\n",
            "35/35 - 0s - loss: 32.5478 - val_loss: 35.6298\n",
            "Epoch 41/1000\n",
            "35/35 - 0s - loss: 29.1137 - val_loss: 33.5206\n",
            "Epoch 42/1000\n",
            "35/35 - 0s - loss: 29.7081 - val_loss: 31.8176\n",
            "Epoch 43/1000\n",
            "35/35 - 0s - loss: 30.1992 - val_loss: 35.8219\n",
            "Epoch 44/1000\n",
            "35/35 - 0s - loss: 27.9935 - val_loss: 42.5760\n",
            "Epoch 45/1000\n",
            "35/35 - 0s - loss: 27.4565 - val_loss: 33.9458\n",
            "Epoch 46/1000\n",
            "35/35 - 0s - loss: 25.8407 - val_loss: 29.8500\n",
            "Epoch 47/1000\n",
            "35/35 - 0s - loss: 26.1001 - val_loss: 33.0373\n",
            "Epoch 48/1000\n",
            "35/35 - 0s - loss: 28.4074 - val_loss: 33.4077\n",
            "Epoch 49/1000\n",
            "35/35 - 0s - loss: 26.1031 - val_loss: 30.0508\n",
            "Epoch 50/1000\n",
            "35/35 - 0s - loss: 24.9576 - val_loss: 28.9808\n",
            "Epoch 51/1000\n",
            "35/35 - 0s - loss: 26.4036 - val_loss: 32.3338\n",
            "Epoch 52/1000\n",
            "35/35 - 0s - loss: 24.5055 - val_loss: 29.9850\n",
            "Epoch 53/1000\n",
            "35/35 - 0s - loss: 25.9150 - val_loss: 37.1822\n",
            "Epoch 54/1000\n",
            "35/35 - 0s - loss: 25.2053 - val_loss: 27.0462\n",
            "Epoch 55/1000\n",
            "35/35 - 0s - loss: 24.6121 - val_loss: 29.5046\n",
            "Epoch 56/1000\n",
            "35/35 - 0s - loss: 23.9155 - val_loss: 34.3323\n",
            "Epoch 57/1000\n",
            "35/35 - 0s - loss: 26.6326 - val_loss: 28.4320\n",
            "Epoch 58/1000\n",
            "35/35 - 0s - loss: 23.6491 - val_loss: 25.7695\n",
            "Epoch 59/1000\n",
            "35/35 - 0s - loss: 22.2350 - val_loss: 26.3813\n",
            "Epoch 60/1000\n",
            "35/35 - 0s - loss: 23.5120 - val_loss: 26.4464\n",
            "Epoch 61/1000\n",
            "35/35 - 0s - loss: 23.9673 - val_loss: 27.8546\n",
            "Epoch 62/1000\n",
            "35/35 - 0s - loss: 22.1082 - val_loss: 26.7597\n",
            "Epoch 63/1000\n",
            "35/35 - 0s - loss: 23.0801 - val_loss: 24.0294\n",
            "Epoch 64/1000\n",
            "35/35 - 0s - loss: 21.9378 - val_loss: 24.2582\n",
            "Epoch 65/1000\n",
            "35/35 - 0s - loss: 20.5317 - val_loss: 27.2575\n",
            "Epoch 66/1000\n",
            "35/35 - 0s - loss: 22.4114 - val_loss: 23.5180\n",
            "Epoch 67/1000\n",
            "35/35 - 0s - loss: 20.6971 - val_loss: 25.0725\n",
            "Epoch 68/1000\n",
            "35/35 - 0s - loss: 20.7728 - val_loss: 21.9339\n",
            "Epoch 69/1000\n",
            "35/35 - 0s - loss: 18.5920 - val_loss: 22.3640\n",
            "Epoch 70/1000\n",
            "35/35 - 0s - loss: 19.6762 - val_loss: 24.4902\n",
            "Epoch 71/1000\n",
            "35/35 - 0s - loss: 19.2956 - val_loss: 20.0679\n",
            "Epoch 72/1000\n",
            "35/35 - 0s - loss: 18.3596 - val_loss: 23.0237\n",
            "Epoch 73/1000\n",
            "35/35 - 0s - loss: 17.6737 - val_loss: 20.8386\n",
            "Epoch 74/1000\n",
            "35/35 - 0s - loss: 17.1977 - val_loss: 19.3192\n",
            "Epoch 75/1000\n",
            "35/35 - 0s - loss: 18.2040 - val_loss: 24.5653\n",
            "Epoch 76/1000\n",
            "35/35 - 0s - loss: 19.2876 - val_loss: 21.1927\n",
            "Epoch 77/1000\n",
            "35/35 - 0s - loss: 18.6404 - val_loss: 19.4975\n",
            "Epoch 78/1000\n",
            "35/35 - 0s - loss: 18.3516 - val_loss: 20.9850\n",
            "Epoch 79/1000\n",
            "35/35 - 0s - loss: 16.8919 - val_loss: 19.4020\n",
            "Restoring model weights from the end of the best epoch.\n",
            "Epoch 00079: early stopping\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7fb0432fe910>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 359
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pIDS8197KLJ8"
      },
      "source": [
        "## RMSE"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zXYpVmfJL8s4",
        "outputId": "d1f11923-d17a-46e2-a880-9190eec27239"
      },
      "source": [
        "import numpy as np\n",
        "from sklearn import metrics\n",
        "# 預測值\n",
        "pred = model.predict(x_test).flatten()\n",
        "# RMSE\n",
        "score = np.sqrt(metrics.mean_squared_error(pred,y_test))\n",
        "print(\"Final score (RMSE): {}\".format(score))\n",
        "\n",
        "#即使已經嘗試尋找最佳解，但每次結果依然都有不同"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Final score (RMSE): 4.395366420370345\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "lLcK_6-GvAQv",
        "outputId": "3aa5e7c3-57d6-4107-a994-df20c3884aca"
      },
      "source": [
        "pred = model.predict(x_test)\n",
        "plt.scatter(pred,y_test)\n",
        "plt.ylabel('True Values')\n",
        "plt.xlabel('Predictions')\n",
        "lims = [0, 70]\n",
        "plt.xlim(lims)\n",
        "plt.ylim(lims)\n",
        "_ = plt.plot(lims, lims,color=\"red\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MWjJDk1IVeFB"
      },
      "source": [
        "# Regression chart.\n",
        "def chart_regression(pred, y, sort=True):\n",
        "    t = pd.DataFrame({'pred': pred, 'y': y_test.tolist()})\n",
        "    if sort:\n",
        "        t.sort_values(by=['y'], inplace=True)\n",
        "    plt.plot(t['y'].tolist(), label='expected')\n",
        "    plt.plot(t['pred'].tolist(), label='prediction')\n",
        "    plt.ylabel('output')\n",
        "    plt.legend()\n",
        "    plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TvCf7vUpbjVW"
      },
      "source": [
        "## Lift Chart\n",
        "橫軸為價格，從小至大。\n",
        "藍色線為觀察值，橘色線為預測值。\n",
        "兩條線愈接近則愈準確。\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "1xPTXZKFZ8oP",
        "outputId": "d42edb9c-b532-46c1-97ab-89eabab787ce"
      },
      "source": [
        "pred = model.predict(x_test).flatten()\n",
        "t = pd.DataFrame({'pred': pred, 'y': y_test.SalePrice})\n",
        "t.sort_values(by=['y'], inplace=True)\n",
        "plt.plot(t['y'].tolist(), label='expected')\n",
        "plt.plot(t['pred'].tolist(), label='prediction')\n",
        "plt.ylabel('output')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
